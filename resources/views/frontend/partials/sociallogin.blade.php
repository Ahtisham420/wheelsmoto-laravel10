<script src="https://apis.google.com/js/api:client.js"></script><script src="https://apis.google.com/js/platform.js" async defer></script><script src="https://cdn.jsdelivr.net/npm/jwt-decode@3.1.2/dist/jwt-decode.min.js"></script><script>    function social_login(user_details){        let {id,username,email,profile_image}=user_details;        let formdata=new FormData();        var details=username.split(' ');        formdata.append("social_id",id);        formdata.append("username",username);        formdata.append("email",email);        formdata.append("first_name",details[0]);        formdata.append("last_name",details[1]);        // formdata.append("",);        formdata.append("profile_pic",profile_image);        $.ajaxSetup({            headers: {                'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')            }        });        $.ajax({            method:"post",            url:"{{route('social-login-submit')}}",            data:formdata,            datatype:"json",            cache: false,            processData: false,            contentType: false,            success:function (data){                if(data.g_route === "1"){                    window.location= "{{route("garage")}}";                }else if(data.w_route === "swap"){                    var id =  btoa(data.s_id)  ;                    var r_url  = "{{route('frontend-swap-cars',['s_id'=>':id'])}}";                    r_url =    r_url.replace(":id",id);                    window.location = r_url;                }else if(data.blog_route === "blog"){                    window.location= "{{route("frontend-blog")}}";                }else  if (data.fav_login === "favourite"){                    window.location= "{{route("frontend-home")}}";                } else {                    window.location= "{{route("frontend-home")}}";                }            },            error:function (data){            }        });    }        function startApp() {            gapi.load('auth2', function() {                auth2 = gapi.auth2.init({                    client_id: '577913846255-ijq9th684v0gnvuvn7msplskuov6jeqg.apps.googleusercontent.com',                    cookiepolicy: 'single_host_origin',                    callback: handleCredentialResponse                });                google.accounts.id.prompt();            });        }        // Example callback function        function onSignIn(googleUser) {            console.log('User signed in.');            var profile = googleUser.getBasicProfile();            var user_details = {                id: profile.getId(),                username: profile.getName(),                email: profile.getEmail(),                profile_image: profile.getImageUrl(),            };            console.log('User details:', user_details);                        // Store credential using google.accounts.id.storeCredential            var cred = { id: profile.getId(), password: '...'}; // Replace '...' with actual password            google.accounts.id.storeCredential(cred);            social_login(user_details);        }        // Initialize Google Identity Services and set onSignIn as the callback        var config = {            // other configuration properties            // No need to define a separate callback property here        };        // Load and start the app        gapi.load('auth2', function() {            gapi.auth2.init(config).then(startApp);        });// Function to decode a JWT tokenfunction jwt_decode(token) {    const parts = token.split('.');    if (parts.length !== 3) {        throw new Error('Invalid token');    }    const payload = JSON.parse(atob(parts[1]));    return payload;}// Now you can use the jwt_decode functionfunction handleCredentialResponse(response) {    const idToken = response.credential;    const decodedToken = jwt_decode(idToken);        // You can access decoded JWT fields    var user_details = {    id: decodedToken.sub,    username: decodedToken.name,    email: decodedToken.email,    profile_image: decodedToken.picture,};// Call your function with the user_details objectsocial_login(user_details);    // Your further logic with decoded token    // ...}</script><script>    window.fbAsyncInit = function() {        FB.init({            appId      : '850214205603079',            xfbml      : true,            version    : 'v10.0'        });        FB.getLoginStatus((response) => {            if (response.status === 'connected') {                FB.logout(function(response) {                });                // FB.api('/me', {fields: 'id,first_name,last_name,email,picture'}, function(response) {                //     console.log(response);                //                // });                FB.api('/me/picture?width=180&height=180', function (response) {                    console.log(response);                });            } else {            }        });    };    document.getElementById('facbookbtn').addEventListener('click', () => {        FB.login((response) => {            if (response.authResponse) {                document.getElementById('facbookbtn').style.display = 'none';                FB.api('/me', {fields: 'first_name,last_name,email,picture'}, function(profile) {                    let user_details={                        id:profile.Id,                        username:  profile.first_name+" "+profile.last_name ,                        email:   profile.email,                        profile_image:profile.picture.data.url,                    };                    social_login(user_details);                });                FB.api('/me/picture?width=180&height=180', function (response) {                    console.log(response);                });            }        });    }, false);</script><script async defer crossorigin="anonymous" src="https://connect.facebook.net/en_US/sdk.js"></script>